/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2022                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
#use <conio>
#use <parse>

// You are welcome to define helper functions for your tests

int main() {
  // Create a few texts and dictionaries by hand
  string[] s = alloc_array(string, 6);
  s[0] = "alloc";
  s[1] = "bee";
  s[2] = "brought";
  s[3] = "california";
  s[4] = "californib";
  s[5] = "zzz";

  string[] empty = alloc_array(string, 0);

 // Using them, test the functions check_word and check_text_better
  // you wrote in file speller.c0
  assert(check_word(s, 6, "alloc") == true);
  assert(check_word(s, 6, "california") == true);
  assert(check_word(s, 6, "californib") == true);
  assert(check_word(s, 6, "") == false);
  assert(check_word(s, 6, "zz") == false);

  // something before first word alphabetically but not in dict
  assert(check_word(s, 6, "a") == false);
  assert(check_word(s, 6, "ahioc") == false);
  assert(check_word(s, 6, "allo") == false);
  // something after last word alphabetically but not in dict
  assert(check_word(s, 6, "zzzzz") == false);
  assert(check_word(s, 6, "zzza") == false);

  // nothing should be found in an empty dict
  assert(check_word(empty, 0, "alloc") == false);
  assert(check_word(empty, 0, "") == false);

  // white space should not be in array
  assert(check_word(s, 6, "  ") == false);


 // Later on, read some texts and dictionaries from file
  bundle_t sloth = read_words("texts/sloth.txt");
  int s_length = string_bundle_length(sloth);
  string[] sloth_d = string_bundle_array(sloth);

  bundle_t di = read_words("texts/small-dict.txt");
  int d_length = string_bundle_length(di);
  string[] dict = string_bundle_array(di);


  // using larger dictionary
  assert(check_word(dict, d_length, "sloths") == true);
  assert(check_word(dict, d_length, "sloaths") == false);
  assert(check_word(dict, d_length, "host") == true);

  //checking sloth
  string[] miss = alloc_array(string, s_length);
  //checking check_text_better
  assert(check_text_better(dict, d_length, sloth_d, s_length, miss) == 3);
  assert(string_equal(miss[0], "algee"));
  assert(string_equal(miss[1], "energie"));
  assert(string_equal(miss[2], "idlleness"));

  //check_text_better returns 0 on an empty text
  empty = parse_tokens("");
  assert(check_text_better(dict, d_length, empty, 0, miss) == 0);
  assert(check_text_better(empty, 0, empty, 0, miss) == 0);

  // compared against an empty dict
  bundle_t twt = read_words("texts/scott-tweet.txt");
  int twt_len = string_bundle_length(twt);
  string[] tweet = string_bundle_array(twt);

  miss = alloc_array(string, twt_len);
  assert(check_text_better(dict, d_length, tweet, twt_len, miss) == 4);
  assert(check_text_better(empty, 0, tweet, twt_len, miss) == twt_len);
  printf("All tests passed!\n");
  return 0;
}
